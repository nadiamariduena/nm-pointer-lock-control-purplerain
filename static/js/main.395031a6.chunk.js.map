{"version":3,"sources":["components/3dScenes/TropicFirstPerson.js","components/navigation/Header.js","components/home/Home.js","App.js","reportWebVitals.js","index.js"],"names":["raycaster","Header","className","Component","style","height","TropicalVoid","sceneSetup","objects","moveForward","moveBackward","moveLeft","moveRight","canJump","prevTime","performance","now","velocity","THREE","direction","vertex","color","width","eleModelBlOne","clientWidth","clientHeight","camera","window","innerWidth","innerHeight","position","y","scene","renderer","antialias","setSize","shadowMap","enabled","appendChild","domElement","blocker","controls","PointerLockControls","add","getObject","addEventListener","lock","console","log","display","target","document","event","code","addCustomSceneObjects","floorGeometry","rotateX","Math","PI","attributes","i","l","count","fromBufferAttribute","x","random","z","setXYZ","toNonIndexed","colorsFloor","setHSL","push","r","g","b","setAttribute","floorMaterial","vertexColors","floor","boxGeometry","colorsBox","boxMaterial","specular","flatShading","box","outputEncoding","autoUpdate","gammaFactor","directionalLight","set","castShadow","shadow","spotLight","visible","startAnimationLoop","requestID","requestAnimationFrame","time","isLocked","ray","origin","copy","intersections","intersectObjects","onObject","length","delta","Number","normalize","max","render","handleWindowResize","aspect","updateProjectionMatrix","this","removeEventListener","cancelAnimationFrame","dispose","ref","Home","Fragment","App","basename","process","id","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.395031a6.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport * as THREE from \"three\";\nimport { PointerLockControls } from \"three/examples/jsm/controls/PointerLockControls\";\n//\n//\nconst style = {\n  height: 600, // we can control scene size by setting container dimensions\n};\n//\nlet raycaster;\n// What is RAYCAST?\n// In a shooter game like counter strike, when you shoot,\n// the bullet is no a gameObject travelling fast, but is a\n// \"Ray\" from the gun to N distance. And every player in this ray get damaged.\n//\n//\n\n/*\n\n\n\n\n\n\n  */\nclass TropicalVoid extends Component {\n  componentDidMount() {\n    this.sceneSetup();\n    this.addCustomSceneObjects();\n    this.startAnimationLoop();\n    //\n    window.addEventListener(\"resize\", this.handleWindowResize);\n  }\n  //\n  //\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.handleWindowResize);\n    window.cancelAnimationFrame(this.requestID);\n    // right now with the first person control,\n    // we dont need this dispose as it s already included inside the three folder, check the read me, in the\n    // beginning you will find a copy of the code inside the threejs that I am using.\n    this.controls.dispose();\n  }\n  /*\n\n\n\n  */\n  // 1\n  sceneSetup = () => {\n    //\n    // ----------------\n    this.objects = [];\n    //----------------\n\n    this.moveForward = false;\n    this.moveBackward = false;\n    this.moveLeft = false;\n    this.moveRight = false;\n    this.canJump = false;\n\n    this.prevTime = performance.now();\n    this.velocity = new THREE.Vector3();\n    this.direction = new THREE.Vector3();\n    this.vertex = new THREE.Vector3();\n    this.color = new THREE.Color();\n    // background color scene\n    // this.lemonChiffon = \"rgb(240, 224, 190)\";\n    //\n    //\n    //\n\n    //\n    //                WIDTH/HEIGHT\n    // --------------------------------------------\n    //\n    const width = this.eleModelBlOne.clientWidth;\n    const height = this.eleModelBlOne.clientHeight;\n    //\n    // --------------------------------------------\n    //\n    //\n    // ---------------\n    // Create a camera\n    // ---------------\n    //\n    // \tSet a Field of View (FOV) of 75 degrees\n    // \tSet an Apsect Ratio of the inner width divided by the inner height of the window\n    //\tSet the 'Near' distance at which the camera will start rendering scene objects to 2\n    //\tSet the 'Far' (draw distance) at which objects will not be rendered to 1000\n    this.camera = new THREE.PerspectiveCamera(\n      75,\n      window.innerWidth / window.innerHeight,\n      1,\n      1000\n    );\n    this.camera.position.y = 10;\n    //\n    this.scene = new THREE.Scene();\n    // this.scene.background = new THREE.Color(0xffffff);\n    //\n    //\n    //\n    // ---------------------------------------\n    //                  RENDERER\n    // ---------------------------------------\n    //\n    this.renderer = new THREE.WebGL1Renderer({\n      antialias: true, // will make the edges smooth\n      // set the transparency of the scene, otherwise its black\n      // alpha: true,\n    });\n    //\n    this.renderer.setSize(width, height);\n    // BG color from the scene\n    // showMap is connected to the shadows in any object/model\n    this.renderer.shadowMap.enabled = true;\n    // here you append it to the jsx\n    this.eleModelBlOne.appendChild(this.renderer.domElement); // mount using React ref\n    // document.appendChild(this.renderer.domElement);  //before\n    //\n    this.blocker.appendChild(this.renderer.domElement);\n\n    //\n    //\n    //---------------------------\n    //     PointerLockControl\n    //---------------------------\n    // this.controls = new PointerLockControls(this.camera, this.eleModelBlOne);\n    this.controls = new PointerLockControls(this.camera, this.eleModelBlOne);\n    // Create First Person Controls\n    //\n    //\n    this.scene.add(this.controls.getObject());\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n\n    this.eleModelBlOne.addEventListener(\"click\", () => {\n      this.controls.lock();\n\n      console.log(\"I clicked\");\n    });\n    //\n\n    this.controls.addEventListener(\"lock\", () => {\n      this.eleModelBlOne.style.display = \"none\";\n    });\n    //\n\n    this.controls.addEventListener(\"unlock\", () => {\n      this.eleModelBlOne.style.display = \"block\";\n      this.eleModelBlOne.style.target = \"_blank\";\n    });\n\n    //\n    //\n\n    //-------------------------------\n    //             KEYS\n    //-------------------------------\n    const onKeyDown = (event) => {\n      switch (event.code) {\n        case \"ArrowUp\":\n        case \"KeyW\":\n          this.moveForward = true;\n          break;\n\n        case \"ArrowLeft\":\n        case \"KeyA\":\n          this.moveLeft = true;\n          break;\n\n        case \"ArrowDown\":\n        case \"KeyS\":\n          this.moveBackward = true;\n          break;\n\n        case \"ArrowRight\":\n        case \"KeyD\":\n          this.moveRight = true;\n          break;\n\n        case \"Space\":\n          if (this.canJump === true) this.velocity.y += 350;\n          this.canJump = false;\n          break;\n      }\n    };\n    const onKeyUp = (event) => {\n      switch (event.code) {\n        case \"ArrowUp\":\n        case \"KeyW\":\n          this.moveForward = false;\n          break;\n\n        case \"ArrowLeft\":\n        case \"KeyA\":\n          this.moveLeft = false;\n          break;\n\n        case \"ArrowDown\":\n        case \"KeyS\":\n          this.moveBackward = false;\n          break;\n\n        case \"ArrowRight\":\n        case \"KeyD\":\n          this.moveRight = false;\n          break;\n      }\n    };\n\n    document.addEventListener(\"keydown\", onKeyDown);\n    document.addEventListener(\"keyup\", onKeyUp);\n    //\n    //\n    // What is RAYCAST?\n    // In a shooter game like counter strike, when you shoot,\n    // the bullet is no a gameObject travelling fast, but is a\n    // \"Ray\" from the gun to N distance. And every player in this ray get damaged.\n    raycaster = new THREE.Raycaster(\n      new THREE.Vector3(),\n      new THREE.Vector3(0, -1, 0),\n      0,\n      10\n    );\n\n    //\n    //\n  };\n\n  /*\n\n\n\n\n\n\n\n\n\n\n  */\n  // 2\n  addCustomSceneObjects = () => {\n    //\n    //\n    // ---------------\n    // floor Geometry\n    // ---------------\n\n    this.floorGeometry = new THREE.PlaneGeometry(2000, 2000, 100, 100);\n    this.floorGeometry.rotateX(-Math.PI / 2);\n    //\n    //-------------------\n    // vertex displacement\n    //-------------------\n    //\n    let position = this.floorGeometry.attributes.position;\n    //\n    for (let i = 0, l = position.count; i < l; i++) {\n      this.vertex.fromBufferAttribute(position, i);\n      this.vertex.x += Math.random() * 20 - 10;\n      this.vertex.y += Math.random() * 2;\n      this.vertex.z += Math.random() * 20 - 10;\n      position.setXYZ(i, this.vertex.x, this.vertex.y, this.vertex.z);\n    }\n    // ensure each face has unique vertices  **\n    this.floorGeometry = this.floorGeometry.toNonIndexed();\n    //\n    position = this.floorGeometry.attributes.position;\n    //\n    //--------------\n    // colorsFloor\n    //--------------\n    const colorsFloor = [];\n    //\n    // what makes the triangles of the floor have different colors\n    for (let i = 0, l = position.count; i < l; i++) {\n      // here you are generating random colors HSL\n      this.color.setHSL(\n        Math.random() * 0.3 + 0.5,\n        0.75,\n        Math.random() * 0.25 + 0.75\n      );\n      colorsFloor.push(this.color.r, this.color.g, this.color.b);\n    }\n    //\n    this.floorGeometry.setAttribute(\n      \"color\",\n      new THREE.Float32BufferAttribute(colorsFloor, 3)\n    );\n    //\n    //\n    this.floorMaterial = new THREE.MeshBasicMaterial({ vertexColors: true });\n    //\n    //\n    // ------------ Here you add to the scene all the ABOVE -----\n    this.floor = new THREE.Mesh(this.floorGeometry, this.floorMaterial);\n    this.scene.add(this.floor);\n    //\n    //\n    // ---------\n    // BOXES GEOMETRY\n    // ---------\n    // .toNonIndexed();  ensure each face has unique vertices\n    this.boxGeometry = new THREE.BoxGeometry(20, 20, 20).toNonIndexed();\n    //\n    position = this.boxGeometry.attributes.position;\n    //--------------\n    // colors Box\n    //--------------\n    const colorsBox = [];\n    //\n    for (let i = 0, l = position.count; i < l; i++) {\n      this.color.setHSL(\n        Math.random() * 0.3 + 0.5,\n        0.75,\n        Math.random() * 0.25 + 0.75\n      );\n      colorsBox.push(this.color.r, this.color.g, this.color.b);\n    }\n    //\n    this.boxGeometry.setAttribute(\n      \"color\",\n      new THREE.Float32BufferAttribute(colorsBox, 3)\n    );\n    //\n    // the 500 correspond to the amount of boxes\n    // the material is MeshPhong, apparently its a good material to cast shadows\n    for (let i = 0; i < 500; i++) {\n      const boxMaterial = new THREE.MeshPhongMaterial({\n        specular: 0xffffff,\n        flatShading: true,\n        vertexColors: true,\n        // push a colour per vertex\n      });\n      boxMaterial.color.setHSL(\n        Math.random() * 0.2 + 0.5,\n        0.75,\n        Math.random() * 0.25 + 0.75\n      );\n      // ---------\n      // BOX\n      // ---------\n      const box = new THREE.Mesh(this.boxGeometry, boxMaterial);\n      box.position.x = Math.floor(Math.random() * 20 - 10) * 20;\n      box.position.y = Math.floor(Math.random() * 20) * 20 + 10;\n      box.position.z = Math.floor(Math.random() * 20 - 10) * 20;\n\n      this.scene.add(box);\n      this.objects.push(box);\n    }\n    //\n    //\n    //\n    //\n    //\n    //----------------------------------\n    //         BLENDER  MODELS\n    //----------------------------------\n    //\n\n    //---------------------\n    //   Directional Light\n    //---------------------\n    //\n    // //\n    this.renderer.outputEncoding = THREE.sRGBEncoding;\n    this.renderer.shadowMap.enabled = true;\n    this.renderer.shadowMap.autoUpdate = true;\n    this.renderer.gammaFactor = 2.2;\n\n    const directionalLight = new THREE.DirectionalLight(0xffffff);\n    directionalLight.position.set(5, -1, 100);\n\n    // position as follow , the light comes from x:-1000, comes from: y and the last comes from : z\n    directionalLight.position.set(1000, 1000, 1000);\n    directionalLight.castShadow = true;\n    directionalLight.shadow.camera = new THREE.OrthographicCamera(\n      -100,\n      200,\n      -200,\n      200,\n      0.5,\n      5000\n    );\n    // //\n    this.scene.add(directionalLight);\n    // The light points to the flat ground\n    // this.directionalLight.target = this.plane;  //dont add this\n    //\n    //\n    //THIS LIGHT IS ON THE BOTTOM\n    //---------------------\n    //     spotLight FF5733\n    //---------------------\n    //\n\n    // With the light you can see the colors you added to each geometry in the materials\n    this.spotLight = new THREE.SpotLight(0xffffff, 0.5); //intensity:   0.5);\n    // spotLight.position.set( 0 , 10 , 0 );\n    this.spotLight.position.set(5, -50, 0); //x, y , z   original (5, -50, 0);\n    // (2, 32, 32); with this settings the light will be on the front\n    this.spotLight.castShadow = true;\n    //\n    // this will remove the shadows\n    this.spotLight.visible = true;\n    //\n    this.scene.add(this.spotLight);\n    // //\n    //\n    //\n  };\n  //\n  //\n  //\n\n  // 3\n  startAnimationLoop = () => {\n    //\n    this.requestID = window.requestAnimationFrame(this.startAnimationLoop);\n\n    // Save the current time\n    this.time = performance.now();\n    //// Are the controls enabled? (Does the browser have pointer lock?)\n    if (this.controls.isLocked === true) {\n      //\n      raycaster.ray.origin.copy(this.controls.getObject().position);\n      // A ray that emits from an origin in a certain direction.\n      raycaster.ray.origin.y -= 10;\n\n      this.intersections = raycaster.intersectObjects(this.objects);\n\n      this.onObject = this.intersections.length > 0;\n      // Create a delta value based on current time\n      this.delta = (this.time - this.prevTime) / 1000;\n      //\n      //\n      //\n      // Set the velocity.x and velocity.z using the calculated time delta\n      this.velocity.x -= this.velocity.x * 10.0 * this.delta;\n      this.velocity.z -= this.velocity.z * 10.0 * this.delta;\n      // As velocity.y is our \"gravity,\" calculate delta\n      this.velocity.y -= 9.8 * 100.0 * this.delta; // 100.0 = mass\n      //\n\n      //\n      this.direction.z = Number(this.moveForward) - Number(this.moveBackward);\n      this.direction.x = Number(this.moveRight) - Number(this.moveLeft);\n      this.direction.normalize(); // this ensures consistent movements in all directions\n\n      if (this.moveForward || this.moveBackward)\n        this.velocity.z -= this.direction.z * 400.0 * this.delta;\n      if (this.moveLeft || this.moveRight)\n        this.velocity.x -= this.direction.x * 400.0 * this.delta;\n      // ------------------- //\n\n      //              *****\n      //              new\n      // if (this.controls.moveForward) {\n      //   this.velocity.z -= 400.0 * this.delta;\n      // }\n\n      // if (this.controls.moveBackward) {\n      //   this.velocity.z += 400.0 * this.delta;\n      // }\n\n      // if (this.controls.moveLeft) {\n      //   this.velocity.x -= 400.0 * this.delta;\n      // }\n\n      // if (this.controls.moveRight) {\n      //   this.velocity.x += 400.0 * this.delta;\n      // }\n      // ---------------------------------------\n\n      //\n      //              *****\n      //\n\n      //\n      if (this.onObject === true) {\n        this.velocity.y = Math.max(0, this.velocity.y);\n        this.canJump = true;\n      }\n\n      this.controls.moveRight(-this.velocity.x * this.delta);\n      this.controls.moveForward(-this.velocity.z * this.delta);\n      this.controls.getObject().position.y += this.velocity.y * this.delta; // new behavior\n      //\n      //\n      // Prevent the camera/player from falling out of the 'world'\n      if (this.controls.getObject().position.y < 10) {\n        this.velocity.y = 0;\n        this.controls.getObject().position.y = 10;\n\n        this.canJump = true;\n      }\n    }\n    //\n    //\n    this.prevTime = this.time;\n\n    //\n    //\n\n    this.renderer.render(this.scene, this.camera);\n  };\n\n  /*\n\n\n\n  */\n  handleWindowResize = () => {\n    const width = this.eleModelBlOne.clientWidth;\n    const height = this.eleModelBlOne.clientHeight;\n    //\n    // updated renderer\n    this.renderer.setSize(width, height);\n    // updated **camera** aspect ratio\n    this.camera.aspect = width / height;\n    // That is the Three.js optimization: you can group multiple camera changes into a block with only one\n    this.camera.updateProjectionMatrix();\n  };\n  /*\n\n\n  */\n\n  render() {\n    return (\n      <div className=\"scene-oblivion\">\n        {/* --------------------- */}\n        <div className=\"blocker\" ref={(ref) => (this.blocker = ref)}>\n          {\" \"}\n        </div>{\" \"}\n        {/* --------------------- */}\n        {/* --------------------- */}\n        <div\n          className=\"modelBleOne\"\n          style={style}\n          ref={(ref) => (this.eleModelBlOne = ref)}\n        >\n          <br />\n          <br />\n          Move: WASD\n          <br />\n          Jump: SPACE\n          <br />\n          Look: MOUSE\n        </div>\n        {/* --------------------- */}\n        {/* --------------------- */}\n        {/* --------------------- */}\n      </div>\n    );\n  }\n}\n\nexport default TropicalVoid;\n","import React, { Component } from \"react\";\n\nclass Header extends Component {\n  render() {\n    return (\n      <header>\n        <div className=\"header-wrapper\">\n          <nav>\n            <div className=\"logo\">\n              <h3>NM</h3>\n            </div>\n\n            <ul>\n              <li>portfolio</li>\n              <li>contact</li>\n            </ul>\n          </nav>{\" \"}\n          {/* ------------  */}\n          {/* ------------  */}\n          {/* ------------  */}\n          <div className=\"bio-nav\">\n            <p>\n              I'm Nadia Mariduena, a Web &amp; 3D designer based in Berlin//\n              Germany.\n            </p>\n          </div>\n        </div>\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","import React from \"react\";\n\nimport Header from \"../navigation/Header\";\nimport TropicalVoid from \"../3dScenes/TropicFirstPerson\";\n// import HomePortfolioGallery from \"./HomePortfolioGallery\";\n// import ContactSection from \"./HomeContact\";\n// import FooterTextAnimation from \"./HomeFooterText\";\n\n//\n\nfunction Home() {\n  return (\n    <React.Fragment>\n      {/* --------------- */}\n      {/* --------------- */}\n      {/* --------------- */}\n      <Header />\n      {/* --------------- */}\n      {/* --------------- */}\n      {/* --------------- */}\n      <section className=\"container-section-scene-home\">\n        {/* ----------------------------------------- */}\n        {/*             FLAG SECTION                  */}\n        {/* ----------------------------------------- */}\n        <div className=\"scene-threejs\">\n          <div className=\"wrapper-flag-scene-threejs\">\n            {/* ----------------------------------------- */}\n\n            <div className=\"wrapper-scene-oblivion\">\n              <TropicalVoid />\n            </div>\n            {/* ----------------------------------------- */}\n\n            {/* <div className=\"scene-description-home\">\n              <div className=\"wrapper-scene-description-home\">\n                <h3 className=\"h3-text-img-home\">3D TESTS</h3>\n                <p>\n                  I created this 3d scenes using threejs during my time at DCI.\n                  Additional information about the references used for this\n                  project, can be found in my github.\n                </p>\n              </div>\n            </div> */}\n            {/* ----------------------------------------- */}\n          </div>\n        </div>\n      </section>\n      {/* ----------------------------------------- */}\n      {/* ----------------------------------------- */}\n      {/* ----------------------------------------- */}\n      {/* ----------------------------------------- */}\n      {/* ----------------------------------------- */}\n      {/* ----------------------------------------- */}\n      {/* <section className=\"container-gallery\">\n        <HomePortfolioGallery />\n      </section> */}\n\n      {/* ----------------------------------------- */}\n      {/* ----------------------------------------- */}\n      {/* ----------------------------------------- */}\n      {/* ----------------------------------------- */}\n      {/* ----------------------------------------- */}\n      {/* ----------------------------------------- */}\n\n      {/* ----------------------------------------- */}\n      {/*             CONTACT SECTION               */}\n      {/* ----------------------------------------- */}\n      {/* <ContactSection /> */}\n      {/* --------------- */}\n      {/* <FooterTextAnimation /> */}\n    </React.Fragment>\n  );\n}\n\nexport default Home;\n","import React, { Component } from \"react\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\n\n//\n\n//\nimport Home from \"./components/home/Home\";\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <div className=\"App\">\n          <div id=\"wrapper-app\">\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              {/* <Route exact path=\"/portfolio\" component={Portfolio} /> */}\n            </Switch>\n          </div>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./scss/main.scss\";\nimport App from \"./App\";\n\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}